<div id="google-map"></div>
<div class="range-label">overlay opacity</div>
<!- div id="coords"></div-->
<input id="opacity" class="range-slider" type="range" value= "0.8" min="0.0" max="1.0" step="0.05" />

<script>

const DRAGGABLE = <%= if @is_edit, do: "true", else: "false" %>
function initMap() {
  'use strict'
  let mapCenter = {lat: <%= @map.center_lat %>, lng:<%= @map.center_long %>},
    overlayURL = '<%= @map.overlay_URL %>',
    overlayBounds = {
      north: <%= @map.overlay_north %>,
      south: <%= @map.overlay_south %>,
      east: <%= @map.overlay_east %>,
      west: <%= @map.overlay_west %>
   }


 // Generate map
  let enhancedMap = new google.maps.Map(document.getElementById('google-map'), 
      {
        center: mapCenter,
        zoom: <%= @map.zoom %>,
        scrollwheel: false,
        styles: [{
          featureType: 'poi.business',
          elementType: 'labels',
          stylers: [{
            visibility: 'off'
          }]
        }]
      });

  let mapOverlay = new google.maps.GroundOverlay(overlayURL, overlayBounds);
  mapOverlay.setMap(enhancedMap);

  let  opacitySlider = document.getElementById('opacity');
  
  function setOpacity() {
      mapOverlay.setOpacity(parseFloat(opacitySlider.value));
    }
  setOpacity ();
  opacitySlider.addEventListener("input",setOpacity);

  <%= if @is_edit do  %>
      /* handles for adjusting the overlay */
    var handleIcon = {
      url: "https://upload.wikimedia.org/wikipedia/commons/d/d1/Square.png",
      scaledSize: new google.maps.Size(10, 10),
    }

  let topLeftHandle = new google.maps.Marker({
                        icon: handleIcon,
                        draggable: true,
                        map: enhancedMap,
                        position: {lat: <%=@map.overlay_north %>,
                                  lng: <%=@map.overlay_west %>
                        }
                  });
 
  let bottomRightHandle = new google.maps.Marker({
                        icon: handleIcon,
                        draggable: true,
                        map: enhancedMap,
                        position: {lat: <%=@map.overlay_south %>,
                                  lng: <%=@map.overlay_east %>
                        }
                  });
  

  function updateOverlayBounds() {
    let newTopLeft = topLeftHandle.getPosition();
    let newBottomRight = bottomRightHandle.getPosition();
    let newBounds = new google.maps.LatLngBounds();

    /* switch from nw,se handles to ne,sw bounding box */
    newBounds.extend(newTopLeft);
    newBounds.extend(newBottomRight);
    mapOverlay.set("bounds", newBounds);

    mapOverlay.setMap(enhancedMap);
  }


  google.maps.event.addListener(topLeftHandle,'drag',updateOverlayBounds);
  google.maps.event.addListener(bottomRightHandle,'drag',updateOverlayBounds);

  google.maps.event.addListener(topLeftHandle, 'dragend', updateMap)
  google.maps.event.addListener(bottomRightHandle, 'dragend', updateMap)
  function updateMap() {
    let newTopLeft = topLeftHandle.getPosition();
    let newBottomRight = bottomRightHandle.getPosition();
    let jsonRequestData = 
          {map: 
            {
            overlay_north: newTopLeft.lat()+"",
            overlay_west: newTopLeft.lng()+"",
            overlay_south: newBottomRight.lat()+"",
            overlay_east: newBottomRight.lng()+""
            }
          };
      let mapID = <%= @map.id %>;

      jsonRequest("PATCH","/api/map/"+mapID,jsonRequestData);
    }

<% end %>

  /* set up markers */
  let markerIcon = {
    url: "<%= @map.marker_URL %>",
    scaledSize: new google.maps.Size(15, 40)
  };

  let markers = <%= raw Poison.encode!(@map.markers) %>;
  let mapID = <%= @map.id %>;
  for (let JSONMarker of markers) {
    putMarkerOnMap(JSONMarker, markerIcon, enhancedMap, mapID);
  };
}

function jsonRequest(type, url, jsonData, callback,callback_params) {
  let csrf = document.querySelector("meta[name=csrf]").content;
  let xhttp = new XMLHttpRequest();
  if (callback) {
    xhttp.onreadystatechange = () => {
      if (this.readyState == 4 && this.status == 200) {
        callback(callback_params)
      }
    }
  }
  xhttp.open(type, url, true);
  xhttp.setRequestHeader("Content-Type", "application/json");
  xhttp.setRequestHeader("Accept", "application/json");
  xhttp.setRequestHeader("X-CSRF-TOKEN", csrf);
  xhttp.send(JSON.stringify(jsonData));
}

</script>
<script async defer
        src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCo4Y2q3GO6_gO-XmE8eqjdO1aah_2RbB0&callback=initMap">
</script>

